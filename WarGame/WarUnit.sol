
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import 'InterfaceGameObject.sol';

contract WarUnit is InterfaceGameObject{

    struct unitStats { 
        uint defense;
        uint attack;
        uint health;
    }
    unitStats unit;
    address private ownerAddress;

    constructor(uint defense, uint attack) public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();

        uint def = defense;
        uint atk = attack;

        // по умолчанию у каждого юнита будет 10 единиц здоровья
        unit = unitStats(def, atk, 10);    
    }

    modifier checkOwnerAndAccept virtual {
		require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}

    // Получить атаку
    function getAttacked() virtual external override{
        require(unit.health > 0, 103);
        tvm.accept();
        ownerAddress = msg.sender;
        unit.health -= (unit.attack - unit.defense);
    }

    // Получить силу защиты
    function getDefense() virtual public view override returns (uint){
        tvm.accept();
        return unit.defense;
    }
    
    // Получить силу атаки
    function getAttack() virtual public view override returns (uint){
        tvm.accept();
        return unit.attack;
    }

    // Получить текущее здоровье
    function getCurrentHealth() virtual public view override returns (uint){
        tvm.accept();
        return unit.health;
    }

    // Обработка смерти
    function deathCase(address dest) virtual view public {
        tvm.accept();
        if (getCurrentHealth() <= 0) {
            sendAllAndDelete(dest);
        }
    }
    
    // Отправка всех денег по адресу и уничтожение
    function sendAllAndDelete(address dest) virtual public pure checkOwnerAndAccept {
        tvm.accept();
        dest.transfer(1, false, 160);
    }
}
