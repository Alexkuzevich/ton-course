
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

contract task3_2 {

    uint32 public timestamp;
    uint8 public taskCount = 0;

    struct tasks {
        string taskName;
        uint32 timestamp;
        bool done;    
    }    

    mapping(uint8 => tasks) public organizer;

    constructor() public {
        
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
        timestamp = now;
    }

    // 1. Добавляем новую задачу
   function addTask(string taskName) public {
        tvm.accept();
        taskCount++;
        organizer[taskCount] = tasks(taskName, now, false);

    }

    // 2. Количество открытых задач
    function numOfTasks() public returns(uint) {
        tvm.accept(); 
        tasks[] tempArray;
        for((uint8 key, tasks value) : organizer) {
            tempArray.push(value);
        }
        return tempArray.length;
    }

    // 3. Список задач
    function getTaskList() public returns(tasks[]) {
        tvm.accept(); 
        tasks[] tempArray;
        for((uint8 key, tasks value) : organizer) {
            tempArray.push(value);
        }
        return tempArray;
    }

    // 4. Описание задачи по ключу
    function getTask(uint8 inputKey) public returns(string) {
        tvm.accept();
        string tempString;
        for((uint8 key, tasks value) : organizer) {
            if(key == inputKey) {
                tempString = value.taskName;
            }
        }
        return tempString;
    }

    // 5. Удалить задачу по ключу
    function deleteTask(uint8 inputKey) public {
        tvm.accept();
        for((uint8 key, tasks value) : organizer) {
            if(key == inputKey) {
                delete organizer[key];
            }
        }
    }

    // 6. Отметить задачу как выполненную
    function completeTask(uint8 inputKey) public {
        tvm.accept();
        for((uint8 key, tasks value) : organizer) {
            if(key == inputKey) {
                organizer[key].done = true;
            }
        }
    }
}
